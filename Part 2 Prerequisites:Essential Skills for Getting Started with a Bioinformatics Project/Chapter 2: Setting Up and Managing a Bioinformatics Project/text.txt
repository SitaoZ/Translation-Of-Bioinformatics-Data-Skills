第二章 建立和管理生物信息学项目

    正如一个组织良好的实验室使科学家的生活更轻松一样，一个组织良好、记录充分的项目也使生物信息学家的生活更轻松。
不管你在做什么样的项目，你的项目目录都应该以一种一致的、可理解的方式来安排。清晰的项目组织使您和合作者更容易准确
地确定所有内容的位置和内容。此外，当文件被组织和清楚地命名时，自动化任务要容易得多。例如，如果300个基因序列存储
在单独的FASTA文件中，并且这些文件被组织在一个目录中并且命名一致，那么用一个脚本来处理这些文件是很简单的。
    每个生物信息学项目开始于一个空的目录，所以本书从项目组织的一章开始是非常合适的。在本章中，一些组织你生信项目
目录的实际操作，和怎样用Markdown的方式记录你自己的工作。我们还将了解为什么项目目录组织不仅仅是为了保持整洁，而是
对于跨大量文件自动执行任务的方式至关重要。
    项目目录和目录结构
    创建一个好的生物信息项目结构是实现可复现的项目的基础。实际处理非常简单，布局一个项目只需要使用mkdir创建几个
目录，并使用touch创建空的自述文件（稍后我们将更深入地了解这些命令）。但这种简单的初步计划从长远来看是有回报的。
研究人员可以花数年的时间在这个目录中工作，其他研究者也会注意到一个好的项目组织重要性。虽然最终你会开发出一个适合
你的项目组织方案，但在本章中，我们将从我在工作中使用的方案（类似于Noble的方案）开始。
    项目中使用的所有文件和目录都应该位于具有明确名称。在一个项目的过程中，你会积累数据文件、笔记、脚本等等，如果
这些文件分散在你的硬盘上（或者更糟的是，在许多计算机的硬盘上），那么跟踪所有的东西都将是一场噩梦。更糟糕的是，这样
一个无序的项目会让你的研究变得几乎无法复制。
    将您的所有文件保存在一个目录中将大大简化您和你的合作者，以及促进可复制性（我们将讨论如何协作
在第5章中使用Git编写一个项目目录）。假设你在找寻玉米SNP。你的第一步是选择一个短的，合适的项目名
称并创建一些基本目录：
    $ mkdir zmays-snps
    $ cd zmays-snps
    $ mkdir data
    $ mkdir data/seqs scripts analysis
    $ ls -l
    total 0
    drwxr-xr-x 2 vinceb staff 68 Apr 15 01:10 analysis
    drwxr-xr-x 3 vinceb staff 102 Apr 15 01:10 data
    drwxr-xr-x 2 vinceb staff 68 Apr 15 01:10 scripts
    这是一个明智的项目布局方案。在这里，数据/包含所有原始和中间数据数据。正如我们将看到的，
在data/，数据处理步骤被视为独立的子目录。我将一般项目需要的脚本保存在scripts/目录中。
如果脚本包含许多文件（例如，多个Python模块），它们应该驻留在自己的文件中子目录。将脚本隔离
在自己的子目录中也会保留项目目录在开发这些脚本时保持整洁（当它们生成测试输出文件时）。
    生物信息学项目包含许多较小的分析，例如，分析原始序列的质量，比对输出，以及将产生的最终
数据一篇论文的图表。我喜欢将这些分析放在一个analysis/的目录中，因为它允许合作者无需深入研
究就可以看到这些高层次的分析到子项目目录中。
    什么是名称？
    命名计算机上的文件和目录比你想象的要重要。从可视化的操作系统转移到unix命令行上来，许多
人养成了在文件名和目录名中使用空格的坏习惯。这在基于Unix的环境中不合适，因为空格用于分隔命
令中的参数。例如，假设您从GUI创建一个名为raw sequences的目录（例如，通过OS X的Finder），
然后尝试使用以下命令删除它及其内容：
    $ rm -rf raw sequences
    如果幸运的话，会警告您raw和sequences“没有这样的文件或目录”。这是怎么回事？空间很重要：
您的shell将rm命令解释为“同时删除原始和序列文件”，而不是“删除一个名为raw sequences的文件或目录”。
    如果你不幸的有一个文件或目录原始或序列，此rm命令将删除它。有可能通过使用引号
（例如，rm-r“raw sequences”）来转义它，但是最好不要在文件名或目录名中使用空格。最好只使用字母、
数字、下划线和目录和文件名中的破折号。
    尽管Unix不需要文件扩展名，包括扩展名帮助指示每个文件的类型。例如，一个文件叫osativa-genes.fasta
很清楚这是一个序列文件以FASTA格式。相反，一个名为osativa genes的文件可以是一个基因模型的文件，关于
这些水稻基因在哪里的注释来自或序列数据。有疑问时，直截了当总是更好 在文件名、文档和正在编写代码。

    脚本和分析通常需要引用项目层次结构中的其他文件（如数据)。这可能需要指向父目录，在你的目录层级结构里面。
在这种情况下，使用相对路径是非常重要的，而不是使用绝对路径。只要你中间项目目录的结构保持一致，这些相对路径
就会一致起作用。相反，绝对路径依赖你个别用户的权限，和目录结构细节，在项目的目录层级之上。使用绝对路径会让你的
工作在合作者之间不是很方便，，会降低可复现的能力。
    我的项目目录方案绝不是唯一可能的方案。我和生物信息学家合作过，他们的项目使用完全不同的方案，并做得很好。
但是，无论组织方案如何，一位优秀的生物信息学家都将始终广泛记录所有内容，并使用可以由计算机解析的清晰文件名，
这是我们将要提到的两点。
    项目文档
    除了一个好的目录结构外，你的项目也应该有好的记录文档。差的文档会使得项目难以附复现和产生严重的问题。在
生信项目里有大量潜在的复杂文件，：复杂的工作流程，大量的文件，不可计算的参数，不同的软件版本。最好的方法来解
决复杂性造成的问题就是记录他们。当你需要回过头看看和重新分析时，文档会让变得更加容易，给文章写每一步详细的方法，
在目录中找到原始的数据。那么什么东西是你该记录的呢？下面有一些建议：
    记录方法和工作流
    你应该记录全部的命令行，包括你产生数据的和结果的。尽管你使用的是软件默认的参数，你也应该把它记录。因为新的
软件版本会使用不同的默认参数.Scripts 应该记录所有的步骤，和参数，确保记录在这个脚本中所有的命令行。一般情况下，
你工作中产生的结果的所有命令行都应该被记录。
    记录所有数据的来源
    你必学溯源所有的数据，从哪里下载？谁给的？和一些其他的相关信息。数据不仅仅指你的项目实验数据。是你程序产生结果
使用的全部数据。包括你合作者分享的文件，基因注释溯源，参考基因组，等等。记录有关您的数据或元数据的重要数据至关重要。
例如，如果你下载了基因组区间文件，你应该记录下下载的网址。这看起来是比较显而易见的建议，但是很多次，我们遇到一个分析
步骤，却很难复现，因为我门忘记记录了他的数据来源。
    记录你下载数据的时间
    记录下载数据的时间非常重要，因为那些数据会变化。例如，在数据库更新之后，你的脚本从数据库下载的数据将会产生不同的结果。
所以，记录你项目中数据下载的时间非常重要。
    记录数据版本信息
    许多数据库已经释放了多个版本，版本数，和名字。（TAIR10 就是拟南芥基因组注释版本，WS231就是线虫的版本）。在你的文档中
记录所有版本信息，包括小的版本号。
    描述怎样下载数据
    例如，你是否用MySQL下载基因？或者使用UCSC基因组浏览器？这些细节在你溯源下游分析时非常有用。
    记录你所使用的的软件版本
    这似乎不重要，但是记住之前的例子，你的合作者和你溯源没有达到共识的结果时，就是因为一个小的软件版本的变化。这些细节很重要。
好的生信软件通常有一个命令行参数返回软件版本信息。软件版本管理应该使用一个好的管理系统，例如Git，能够准确的记录每一个版本。
也能被用来记录你正在使用的软件版本。如果版本信息不可获取，发布时间，软件的链接，下载的时间就足够了。
    这些所有的时间最好储存在文本文件README中。纯文本可以很容易地直接从命令行读取，搜索和编辑，使其完美
便携式和可访问的读取文件的选择。文本也会在所有的操作系统上适用，意味着你能够在你正在工作的电脑上记录你工作路程的每一个步骤。
纯文本也缺少复杂的格式，这可能会在将文档中的命令复制并粘贴回命令行时产生问题。最好避免使用Microsoft Word for README文
档等格式，因为这些格式不易移植到生物信息学中常见的Unix系统。
    哪里需要有README文件呢？一个好的做法就是子你项目的主目录中设置README。这些自述文件不一定需要冗长，但它们至少应该解释
此目录中的内容以及它是如何到达那里的。这个小的努力可以节省很多时间探索你的项目目录，并防止混淆。在你搬到另一个实验室后，这个
人可能是你的顾问或合作者，一位同事试图复制你的工作，甚至六个月之后，你完全忘记你所做的（这会发生在每个人身上）。
    例如data/README 文件会会包括你data/下面使用的所有数据。当你想要回忆起你项目中所有数据信息时，将这些信息放在README中
是比较容易的。我们说touch 创建readme.touch 会更新文件修改时间，创建新的文件。我们使用的是touch后面的那个功能来创建空文件
放在我们的目录结构中。
    $ touch README data/README
    遵循刚刚讨论的文档指南，data/README 包含从哪里下载的数据，什么时候下载的，怎样下载的。我们在第六章将会学习更多的的数据
的知识，我们看到怎么下载数据，怎样记录数的的例子。
    通过记录这些信息，我们就记录了实验和分析的全部信息，这样使得项目有很好的可重复性。请记住，随着您的项目的发展和数据文件的积累
，为了您自己的方便，它也可以得到回报。
    使用目录将你的项目分子目录
    生物信息学项目包含许多子目录和子分析。例如，在使用比对和组装软件之前，实验数据的质量应该被评估，低质量的区间要被移除。甚至，
在你分析序列时，你的项目目录可以用中间结果来进行聚类。




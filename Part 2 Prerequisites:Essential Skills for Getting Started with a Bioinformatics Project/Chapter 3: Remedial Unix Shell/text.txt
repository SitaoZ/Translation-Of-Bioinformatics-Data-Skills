第三章 辅导Unix shell
    unixshell是生物信息学的基础计算环境。shell作为我们与大型生物信息学程序的接口，作为检查数据和
中间结果的交互式控制台，以及作为我们的管道和工作流的基础设施。本章将帮助您熟练掌握在本书的其余部分中
被广泛使用的必要的unixshell概念。这将使您能够在以后的章节中关注命令的内容，而不是专注于理解shell语法。
    本书假设您熟悉基本主题，例如终端是什么，shell是什么，Unix文件系统层次结构，目录移动，文件权限，
执行命令并使用文本编辑器。如果这些话题对你来说很陌生，那么最好温习一下使用更基本的材料（请参阅第16页
的“本书的假设”以获取一些资源）。在本章中，我们将讨论在生物信息学中如何使用shell的深层基础的补救性概念：
流、重定向、管道、运行程序的工作以及命令替换。了解这些shell主题将使您能够使用shell处理数据（第7章）和
构建管道和工作流（第12章）。在本章中，我们还将了解unixshell在我们如何进行现代生物信息学方面有着如此突
出的作用。如果你觉得已经熟悉了这些shell主题，我建议阅读本文的第一部分然后跳到第四章。
    为什么我们在生物信息学中使用Unix？模块化和Unix哲学
    想象不用Unix作为生物信息学学的环境，我们将完成我们整个项目使用单个大的程序。我们通常不会认为生物
信息项目是一个大的程序，但是我们可以写一个复杂的程序将原始数据作为输入，在一个小时的数据处理之后，输出
可发表的图片和结果的最终表格。对于一个变异calling项目来说，这个程序通常包括原始数据读取，序列比对，
变异calling，变异过滤，最后结果分析。这个程序编码通常很大，可能会有几千行。
    虽然像这样的程序可以根据特定的变量调用项目进行定制，但它的通用性不足以适应其他程序。考虑到它庞大的
代码量，这个程序对于每个新项目的调整是不切实际的。庞大的代码库也会使查找和修复bug变得困难。更糟糕的是，
除非我们的单片程序被显式地编程为检查步骤之间的数据看起来没有错误，否则一个步骤可能会出错（我们不知道），
它会尽职尽责地用不正确的数据继续分析。虽然这个自定义程序在计算上可能更高效，但这将以脆弱、难以修改、容
易出错（因为它使检查中间数据变得非常困难）为代价，并且不适用于未来的项目。Unix是生物信息学的基础计算环
境，因为它的设计理念与这种僵硬和脆弱的方法是对立的。unixshell被设计成允许用户通过将较小的模块化程序连
接在一起来轻松地构建复杂的程序。这种方法是Unix的理念：
    这就是Unix的哲学：编写只做一件事而且做得很好的程序。编写程序一起工作。编写处理文本流的程序，因为这
是一个通用接口。unixshell为这些程序提供了一种相互通信（管道）以及写入和读取文件（重定向）的方法。Unix
的核心程序（我们将在第7章的命令行中使用这些程序来分析数据）是模块化的，设计用于与其他程序很好地协同工作。
Unix哲学的模块化方法在生物信息学中有许多优势：
    使用模块化工作流，可以更容易地发现错误并找出错误发生的位置。在模块化工作流中，每个组件都是独立的，这
使得更容易检查中间结果的不一致性并隔离问题台阶。相比之下，大型非模块程序隐藏了潜在的问题（所有你看到的是它
的最终输出数据），这使得隔离问题的源头变得困难。
    模块化工作流程允许我们尝试其他方法和方法，因为单独的组件可以很容易地与其他组件交换。例如，如果您怀疑某
个特定的比对软件在你的数据变现不好，很容易把这个软件换成另一个。采用模块化工作流程，这是很容易的，我们的比对
与下游分析步骤分开比如变异获取或RNAseq分析。
    我们可以选择适当的模块化语言和工具对于特定任务。这是Unix环境适合生物信息学的另一个原因嗯：它允许我们结
合命令行工具进行交互探索数据（在第7章中有更深入的介绍），Python用于更复杂的脚本，统计分析用R。当程序设计用于
在其他程序中，为特定任务选择专用工具是没有成本的-在生物信息学中我们经常做一些事情。
    模块化程序是可重用的，适用于许多类型的数据。写得好模块化程序可以重新组合并应用于不同的问题和数据集，因为
它们是独立的部分。最重要的是，通过重新组合模块组件，新问题可以用现有工具解决。
    除了强调程序模块化和接口外，McIlroy引用还提到了文本流。我们将在本章中讨论Unix流，但是在我们如何处理大数
据时，流概念非常重要。对大数据的定义可能会有所不同，虽然对一个刚开始测序的实验室来说，单一lane的测序数据可能会
很大，但与较大的测序中心每小时处理的数据相比，这是微不足道的。不管怎样，排序数据的通道太大了，不适合大多数标准
台式机的内存。如果我需要搜索确切的字符串“gtgatataactgcgaa”我不能在记事本里打开数据.Find feature可以精确定
位它在哪里发生，但是内存不够记住所有这些核苷酸。相反，工具必须依赖于数据流，从源中读取并被快速处理。
通用Unix工具和许多生物信息学程序都被设计成通过一个流接收输入并通过另一个流传递输出。正是这些文本流允许我们两个
程序耦合集成到工作流和处理数据中，而无需在计算机内存中存储大量数据。
    不同版本的shell
    



